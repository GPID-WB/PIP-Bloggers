{
  "hash": "3a0c0cdd38e0f8195b31a11432baa381",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Collapse Cheat sheet\"\ndescription: \"Syntax translation from dplyr and data.tablen to collapse\"\nauthor: \"PIP Technical team\"\ndate: \"03/13/2025\"\ncategories: [collapse, data.table, dplyr, efficiency]\nformat:\n  html:\n    toc: true\neditor_options: \n  chunk_output_type: console\nexecute:\n  output: false\n---\n\n\n\n## Introduction\n\nThis post is inspired in the Atreba's blog: [A data.table and dplyr tour](https://atrebas.github.io/post/2019-03-03-datatable-dplyr/). The objective of this post is to complement Atreba's one with the syntax of the [`{collapse}`](https://sebkrantz.github.io/collapse/) R package.\n\n## Basic understanding of the three packages\n\n### dplyr\n\nA grammar of data manipulation in R which provides a consistent set of verbs to help you solve the most common data manipulation challenges. It is part of the `tidyverse` universe. [Click here for more information.](https://dplyr.tidyverse.org/).\n\n### data.table\n\nA syntax to operate data manipulation operations, such as subset, group, update, join, etc. It reduces programming and compute time tremendously. [Click here for more information.](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html)\n\n### collapse\n\nA large C/C++ based package for data transformation and statistical computing in R. It aims to facilitate complex data transformations, explorations and computing tasks in R, while making code fast, flexible, parsimonious and programmer friendly. [Click here for more information.](https://sebkrantz.github.io/collapse/) \n\n## Load libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(collapse)\n```\n:::\n\n\n\n## Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\n\n# Number of rows\nn <- 10000\n\n# Generate fake data\ndf <- data.frame(\n  id1 = 1:n,  # Unique ID\n  id2 = sample(1:500, n, replace = TRUE),  # Repeating ID\n  dt = seq.Date(from = as.Date(\"2023-01-01\"), by = \"day\", length.out = n),  # Dates\n  tm = format(seq.POSIXt(from = as.POSIXct(\"2023-01-01 00:00:00\"), \n                         by = \"hour\", length.out = n), \"%H:%M:%S\"),  # Time\n  ch = sample(c(\"A\", \"B\", \"C\", \"D\"), n, replace = TRUE),  # Character\n  int = sample(1:100, n, replace = TRUE),  # Integer\n  log = sample(c(TRUE, FALSE), n, replace = TRUE),  # Logical\n  realf = runif(n, 1, 100),  # Real (float),\n  reald = runif(n),  # Real ,\n  fct = factor(sample(c(\"X\", \"Y\", \"Z\"), n, replace = TRUE))  # Factor\n)\n\n# Ensure uniqueness\ndf <- unique(df, by = c(\"id1\", \"id2\"))\ndt <- copy(setDT(df))\ntb <- as_tibble(df)\n```\n:::\n\n\n\n## Basic use\n\n### Filtering rows\n\n#### Filter rows using indices\n\n::: panel-tabset\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# super efficient\ndf |> \n  ss(2:5)\n\n# efficient\ndf |> \n  fsubset(2:5)\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[2:5]\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb |> \n  slice(2:5)\n\n# or using index like any data.frame\ntb[2:5,]\n\n# you need to add the comma. Otherwise, you get a different result\ntb[2:5]\n```\n:::\n\n\n:::\n\n#### Discard rows using negative indices\n\n::: panel-tabset\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  ss(-c(2:5)) |> \n  head(4)\n\ndf |> \n  ss(-c(2:5)) |> \n  head(4)\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[!2:5] |> \n  head(4)\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb |> \n  slice(-(2:5)) |> \n  head(4)\n```\n:::\n\n\n:::\n\n#### Filter rows using conditions\n\n::: panel-tabset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using named objects to filer data\nch  <- \"A\" # data has this as variable name\nfct <- \"A\" # data has this as variable name\nx  <- \"A\"\n```\n:::\n\n\n\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  fsubset(ch == \"A\" & id1 == 6)\n\ndf |> \n  fsubset(ch == x & id1 == 6)\n\n# This works\ndf |> \n  fsubset(ch == ch & id1 == 6)\n\n# This does not work\ndf |> \n  fsubset(ch == fct & id1 == 6)\n\n# This through error\ndf |> \n  fsubset(ch == get(fct) & id1 == 6) |> \n  try()\n\n# This works\ndf |> \n  fsubset(ch == get(\"fct\", envir = -2) & id1 == 6) \n\n# NOTE: is there a better way?\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[ch == \"A\" & id1 == 6]\n\ndt[ch == x & id1 == 6]\n\ndt[ch ==ch & id1 == 6]\n\n# this does not work\ndt[ch == fct & id1 == 6]\n\n\ndt[ch == eval(fct) & id1 == 6]\n\n# These work but they are  verbose\ndt[ch == get(\"fct\", envir = parent.frame()) & id1 == 6]\ndt[ch == get(\"fct\", envir = -2) & id1 == 6]\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb |> \n  filter(ch == \"A\" & id1 == 6)\n\ntb |> \n  filter(ch == x & id1 == 6)\n\ntb |> \n  filter(ch == ch & id1 == 6)\n\n# does not work\ntb |> \n  filter(ch == fct & id1 == 6)\n\n# works really well\ntb |> \n  filter(ch == !!fct & id1 == 6)\n```\n:::\n\n\n:::\n\n### Summarise data\n\n#### Summarise columns\n\n::: panel-tabset\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# efficient\ndf |>\n  fsummarise(sum_rf = fsum(realf),\n             sd_rd = fsd(reald))\n\n# shorthand\ndf |>\n  smr(sum_rf = fsum(realf),\n      sd_rd = fsd(reald))\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[, sum(realf)] # returns a vector\n\ndt[, .(sum(realf))] # returns a data.table\n\ndt[, .(sum_rf = sum(realf), # returns a data.table with named columns\n       sd_rd = sd(reald))]\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(tb, sum(realf)) # returns a tibble\n\ntb |> \n  summarise(sum_rf = sum(realf), # returns a tibble\n            sd_rd = sd(reald))\n```\n:::\n\n\n:::\n\n#### Helper functions\n\n::: panel-tabset\n\n## collapse\n\nThe package includes `fsum`,`fprod`, `fmedian`, `fmode`, `fvar`, `fsd`, `fmin`,`fmax`,`fnth`, `ffirst`, `flast`,`fnobs`, and `fndistinct`. \n\n## data.table\n\nThe package includes `first`, `last` and `uniqueN`.\n\n## dplyr\n\nThe package includes `first`, `last`, `n`, `nth`, and `n_distinct`.\n\n:::\n\n### Manipulations of columns\n\n::: panel-tabset\n\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # Add one oe several columns (can also use ftransform)\ndf <- df |>\n  fmutate(log_rf = log(realf)) \n\ndf <- df |>\n  fmutate(log_rd = log(reald),\n           sqrt_rd = sqrt(reald))\n\n# Create one column and eliminate others\nfcompute(df, log2_rf = log_rf*2) \n\n # remove columns\ndf <- df |>\n  fselect(-log_rf,-log_rd,-sqrt_rd)\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add one column\ndt[, log_rf := log(realf)] \n\n# Add several columns\ndt[, ':=' (log_rd = log(reald), \n           sqrt_rd = sqrt(reald))]\n\n# Create one column and eliminate others\ndt[, .(log2_rf = log_rf*2)] \n\n# remove columns\ndt[, c(\"log_rf\", \"log_rd\", \"sqrt_rd\") := NULL] \n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add one or several column\ntb <- tb |> \n  mutate(log_rf = log(realf))\n\ntb <- tb |> \n  mutate(log_rd = log(reald), \n           sqrt_rd = sqrt(reald))\n\n# Create one column and eliminate others\ntransmute(tb, log2_rf = log_rf*2)\n\n# remove columns\ntb <- tb |> \n  select(-log_rf,-log_rd,-sqrt_rd)\n```\n:::\n\n\n\n:::\n\n### by\n\n::: panel-tabset\n\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  fgroup_by(ch)|>\n  fsummarise(sumrf = fsum(realf)) # ordered and indexed results\n\n# Assigned column name\n\ndf |> \n  fgroup_by(abc = tolower(ch))|>\n  fsummarise(sumrf = fsum(realf))\n\n# Add a column with number of observations for each group\n\ndf |>\n  fgroup_by(ch)|>\n  fcount(add = TRUE)\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[, .(sumrf = sum(realf)), by = \"ch\"] # unordered results\n\n# Reordered and indented:\n\ndt[, keyby = ch,\n     .(sumrf = sum(realf))]\n\n# Assigning column name\n\ndt[, keyby = .(abc = tolower(ch)),\n     .(sumrf = sum(realf))]\n\n# Add a column with number of observations for each group\n\ndt[, n := .N, by = ch][]\ndt[, n := NULL] # remove for consistency\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb |> \n  group_by(ch)|>\n  summarise(sumrf = sum(realf)) # ordered results\n\n# Assigned column name\n\ntb |> \n  group_by(abc = tolower(ch))|>\n  summarise(sumrf = sum(realf))\n\n# Add a column with number of observations for each group\n\ntb |>\n  group_by(ch)|>\n  add_tally()\n\n# or...\n\nadd_count(tb, ch)\n```\n:::\n\n\n\n:::\n\n## Going further\n\n### Advanced columns manipulation\n\n::: panel-tabset\n\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize columns\ndf |>\n  fsummarise(across(c(\"realf\", \"reald\"),\n            fmean))\n\n# Summarize using a condition\ndf |>\n  fsummarise(across(is.numeric, # different from dplyr due to across\n                   fmean))\n\n# Modify all the columns\ndf |> \n  fmutate(across(NULL,rev))\n\n# Modify several columns\ndf |> \n  fcomputev(vars = c(\"realf\", \"reald\"), # dropping the other columns\n                  sqrt)\n\ndf <- df |>\n  ftransformv(vars = c(\"realf\", \"reald\"), # keeping the other columns\n                sqrt)\n\ndf <- df |>\n  ftransformv(vars = c(\"realf\", \"reald\"), # reverting for consistency\n                FUN = function(x){ x^2 })\n\n# Modify columns using a condition \n\ndf |>\n  fcomputev(is.numeric,\n           FUN = function(x){x - 1})\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize columns\ndt[, lapply(.SD, mean),\n   .SDcols = c(\"realf\", \"reald\")]\n\n# Summarize using a condition\ndt[, lapply(.SD, mean),\n     .SDcols = is.numeric]\n\n# Modify all the columns\ndt[, lapply(.SD, rev)]\n\n# Modify several columns\ndt[, lapply(.SD, sqrt), # dropping the other columns\n     .SDcols = realf:reald]\n\ncols <- c(\"realf\", \"reald\")\n\ndt[, (cols) := lapply(.SD, sqrt), # keeping the other columns\n     .SDcols = cols]\n\ndt[, (cols) := lapply(.SD, \"^\", 2L), # reverting for consistency\n     .SDcols = cols]\n\n# Modify columns using a condition \ndt[, .SD - 1,\n     .SDcols = is.numeric] \n\nrm(cols)\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize columns\ntb |>\n  summarise(across(c(\"realf\", \"reald\"),\n            mean))\n\n# Summarize using a condition\ntb |>\n  summarise(across(where(is.numeric),\n                   mean))\n\n# Modify all the columns\ntb |> \n  mutate(across(everything(),\n                rev))\n\n# Modify several columns\ntb |>\n  transmute(across(c(\"realf\", \"reald\"), # dropping the other columns\n                  sqrt))\n\ntb <- tb |>\n  mutate(across(all_of(c(\"realf\", \"reald\")), # keeping the other columns\n                sqrt))\n\ntb <- tb |>\n  mutate(across(all_of(c(\"realf\", \"reald\")), # reverting for consistency\n                ~ \"^\"(.x, 2L)))\n\n# Modify columns using a condition \n\ntb |>\n  transmute(across(where(is.numeric), \n                   ~ '-'(., 1L)))\n```\n:::\n\n\n\n:::\n\n### Chain expressions \n\n::: panel-tabset\n\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  fgroup_by(ch)|>\n  fsummarise(sumrf = fsum(realf))|>\n  fsubset(sumrf < 129000)\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt[, by = ch,\n   .(sumrf = sum(realf))][\n     sumrf < 129000\n   ]\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb |>\n  group_by(ch)|>\n  summarise(sumrf = sum(realf))|>\n  filter(sumrf < 129000)\n```\n:::\n\n\n\n:::\n\n### Indexing and keys (not sure it applies)\n\n### set modifications\n\n::: panel-tabset\n\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace values (recommendation to use set of data.table)\n\nset(df, i = 1L, j = 2L, value = 30L) \n\n# Reorder rows\n\ndf <- roworder(df, id2, -id1)\n\ndf <- roworder(df, id1) # reversal for consistency\n\n# Modify column names\n\ndf <- frename(df, dt = date)\n\ndf <- frename(df, date = dt) # reversal for consistency\n\n# reorder columns\n\ndf <- colorder(df, id1, id2, ch)\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace values\n\nset(dt, i = 1L, j = 2L, value = 30L)\n\n# Reorder rows\n\nsetorder(dt, id2, -id1)\n\nsetorder(dt, id1) # reversal for consistency\n\n# Modify column names\n\nsetnames(dt, old = \"dt\", new = \"date\")\n\nsetnames(dt, old = \"date\", new = \"dt\")  # reversal for consistency\n\n# reorder columns\n\nsetcolorder(dt, c(\"id1\",\"id2\",\"ch\"))\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace values\n\ntb[1,2] <- 30L\n\n# Reorder rows\n\ntb <- arrange(tb, id2, desc(id1))\n\ntb <- arrange(tb, id1) # reversal for consistency\n\n# Modify column names\n\ntb <- rename(tb, date = dt)\n\ntb <- rename(tb, dt = date) # reversal for consistency\n\n# reorder columns\n\ntb <- relocate(tb, c(\"id1\", \"id2\", \"ch\"))\n```\n:::\n\n\n\n:::\n\n### Advanced use of by (maybe)\n\n## Join/Bind data sets\n\n### Bind\n\n::: panel-tabset\n\n## collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- data.table(1:3)\ny <- data.table(4:6)\nz <- data.table(7:9, 0L)\n\n# bind rows\n\nrowbind(x, y, fill = TRUE) # always fills\n\n# bind rows using a list\n\nrowbind(list(x, y), idcol = \"id\")\n\n# bind columns\n\nbase::cbind(x, y)\n\nadd_vars(x) <- y # modifies x but keeps data structure and attributes\n```\n:::\n\n\n\n## data.table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- data.table(1:3)\ny <- data.table(4:6)\nz <- data.table(7:9, 0L)\n\n# bind rows\n\nrbind(x, y, fill = TRUE)\n\n# bind rows using a list\n\nrbindlist(list(x, y), idcol = \"id\")\n\n# bind columns\n\nbase::cbind(x, y)\n\nx <- base::cbind(x, y) # modifies x but column names are not changed\n```\n:::\n\n\n\n## dplyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- data.table(1:3)\ny <- data.table(4:6)\nz <- data.table(7:9, 0L)\n\n# bind rows\n\nbind_rows(x, y) # always fills\n\n# bind rows using a list\n\nbind_rows(list(x, y), .id = \"id\")\n\n# bind columns\n\nbind_cols(x, y)\n\nx <- bind_cols(x, y) # modifies x and replace names\n```\n:::\n\n\n\n\n:::\n\n\n## Efficient functions (maybe)\n\n## Other useful functions in collapse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# quick summary (From STATA summarize and xtsummarize)\n\nqsu(df, cols = c(\"realf\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}