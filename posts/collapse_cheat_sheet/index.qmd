---
title: "Collapse Cheat sheet"
description: "Syntax translation from dplyr and data.tablen to collapse"
author: "PIP Technical team"
date: "03/13/2025"
categories: [collapse, data.table, dplyr, efficiency]
format:
  html:
    toc: true
editor_options: 
  chunk_output_type: console
execute:
  output: false
---

## Introduction

This post is inspired in the Atreba's blog: [A data.table and dplyr tour](https://atrebas.github.io/post/2019-03-03-datatable-dplyr/). The objective of this post is to complement Atreba's one with the syntax of the [`{collapse}`](https://sebkrantz.github.io/collapse/) R package.

## Basic understanding of the three packages

### dplyr

A grammar of data manipulation in R which provides a consistent set of verbs to help you solve the most common data manipulation challenges. It is part of the `tidyverse` universe. [Click here for more information.](https://dplyr.tidyverse.org/).

### data.table

A syntax to operate data manipulation operations, such as subset, group, update, join, etc. It reduces programming and compute time tremendously. [Click here for more information.](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html)

### collapse

A large C/C++ based package for data transformation and statistical computing in R. It aims to facilitate complex data transformations, explorations and computing tasks in R, while making code fast, flexible, parsimonious and programmer friendly. [Click here for more information.](https://sebkrantz.github.io/collapse/) 

## Load libraries

```{r}
#| echo: true
#| results: false
#| message: false
#| output: false
#| label: setup
#| warning: false

library(dplyr)
library(data.table)
library(collapse)

```

## Data 

```{r}
#| label: data
#| cache: true
set.seed(42)

# Number of rows
n <- 10000

# Generate fake data
df <- data.frame(
  id1 = 1:n,  # Unique ID
  id2 = sample(1:500, n, replace = TRUE),  # Repeating ID
  dt = seq.Date(from = as.Date("2023-01-01"), by = "day", length.out = n),  # Dates
  tm = format(seq.POSIXt(from = as.POSIXct("2023-01-01 00:00:00"), 
                         by = "hour", length.out = n), "%H:%M:%S"),  # Time
  ch = sample(c("A", "B", "C", "D"), n, replace = TRUE),  # Character
  int = sample(1:100, n, replace = TRUE),  # Integer
  log = sample(c(TRUE, FALSE), n, replace = TRUE),  # Logical
  realf = runif(n, 1, 100),  # Real (float),
  reald = runif(n),  # Real ,
  fct = factor(sample(c("X", "Y", "Z"), n, replace = TRUE))  # Factor
)

# Ensure uniqueness
df <- unique(df, by = c("id1", "id2"))
dt <- copy(setDT(df))
tb <- as_tibble(df)

```

## Basic use

### Filtering rows

#### Filter rows using indices

::: panel-tabset
## collapse

```{r}

# super efficient
df |> 
  ss(2:5)

# efficient
df |> 
  fsubset(2:5)

```

## data.table

```{r}
dt[2:5]
```

## dplyr

```{r}
tb |> 
  slice(2:5)

# or using index like any data.frame
tb[2:5,]

# you need to add the comma. Otherwise, you get a different result
tb[2:5]

```
:::

#### Discard rows using negative indices

::: panel-tabset
## collapse

```{r}

df |> 
  ss(-c(2:5)) |> 
  head(4)

df |> 
  ss(-c(2:5)) |> 
  head(4)

```

## data.table

```{r}
dt[!2:5] |> 
  head(4)
```

## dplyr

```{r}
tb |> 
  slice(-(2:5)) |> 
  head(4)

```
:::

#### Filter rows using conditions

::: panel-tabset
```{r}
# using named objects to filer data
ch  <- "A" # data has this as variable name
fct <- "A" # data has this as variable name
x  <- "A"
```

## collapse

```{r}
df |> 
  fsubset(ch == "A" & id1 == 6)

df |> 
  fsubset(ch == x & id1 == 6)

# This works
df |> 
  fsubset(ch == ch & id1 == 6)

# This does not work
df |> 
  fsubset(ch == fct & id1 == 6)

# This through error
df |> 
  fsubset(ch == get(fct) & id1 == 6) |> 
  try()

# This works
df |> 
  fsubset(ch == get("fct", envir = -2) & id1 == 6) 

# NOTE: is there a better way?

```

## data.table

```{r}
dt[ch == "A" & id1 == 6]

dt[ch == x & id1 == 6]

dt[ch ==ch & id1 == 6]

# this does not work
dt[ch == fct & id1 == 6]


dt[ch == eval(fct) & id1 == 6]

# These work but they are  verbose
dt[ch == get("fct", envir = parent.frame()) & id1 == 6]
dt[ch == get("fct", envir = -2) & id1 == 6]


```

## dplyr

```{r}
tb |> 
  filter(ch == "A" & id1 == 6)

tb |> 
  filter(ch == x & id1 == 6)

tb |> 
  filter(ch == ch & id1 == 6)

# does not work
tb |> 
  filter(ch == fct & id1 == 6)

# works really well
tb |> 
  filter(ch == !!fct & id1 == 6)

```
:::

### Summarise data

#### Summarise columns

::: panel-tabset
## collapse

```{r}

# efficient
df |>
  fsummarise(sum_rf = fsum(realf),
             sd_rd = fsd(reald))

# shorthand
df |>
  smr(sum_rf = fsum(realf),
      sd_rd = fsd(reald))

```

## data.table

```{r}
dt[, sum(realf)] # returns a vector

dt[, .(sum(realf))] # returns a data.table

dt[, .(sum_rf = sum(realf), # returns a data.table with named columns
       sd_rd = sd(reald))]
```

## dplyr

```{r}
summarise(tb, sum(realf)) # returns a tibble

tb |> 
  summarise(sum_rf = sum(realf), # returns a tibble
            sd_rd = sd(reald))

```
:::

#### Helper functions

::: panel-tabset

## collapse

The package includes `fsum`,`fprod`, `fmedian`, `fmode`, `fvar`, `fsd`, `fmin`,`fmax`,`fnth`, `ffirst`, `flast`,`fnobs`, and `fndistinct`. 

## data.table

The package includes `first`, `last` and `uniqueN`.

## dplyr

The package includes `first`, `last`, `n`, `nth`, and `n_distinct`.

:::

### Manipulations of columns

::: panel-tabset

## collapse

```{r}

 # Add one oe several columns (can also use ftransform)
df <- df |>
  fmutate(log_rf = log(realf)) 

df <- df |>
  fmutate(log_rd = log(reald),
           sqrt_rd = sqrt(reald))

# Create one column and eliminate others
fcompute(df, log2_rf = log_rf*2) 

 # remove columns
df <- df |>
  fselect(-log_rf,-log_rd,-sqrt_rd)

```

## data.table

```{r}

# Add one column
dt[, log_rf := log(realf)] 

# Add several columns
dt[, ':=' (log_rd = log(reald), 
           sqrt_rd = sqrt(reald))]

# Create one column and eliminate others
dt[, .(log2_rf = log_rf*2)] 

# remove columns
dt[, c("log_rf", "log_rd", "sqrt_rd") := NULL] 

```

## dplyr

```{r}

# Add one or several column
tb <- tb |> 
  mutate(log_rf = log(realf))

tb <- tb |> 
  mutate(log_rd = log(reald), 
           sqrt_rd = sqrt(reald))

# Create one column and eliminate others
transmute(tb, log2_rf = log_rf*2)

# remove columns
tb <- tb |> 
  select(-log_rf,-log_rd,-sqrt_rd)
  
```

:::

### by

::: panel-tabset

## collapse

```{r}

df |> 
  fgroup_by(ch)|>
  fsummarise(sumrf = fsum(realf)) # ordered and indexed results

# Assigned column name

df |> 
  fgroup_by(abc = tolower(ch))|>
  fsummarise(sumrf = fsum(realf))

# Add a column with number of observations for each group

df |>
  fgroup_by(ch)|>
  fcount(add = TRUE)

```

## data.table

```{r}

dt[, .(sumrf = sum(realf)), by = "ch"] # unordered results

# Reordered and indented:

dt[, keyby = ch,
     .(sumrf = sum(realf))]

# Assigning column name

dt[, keyby = .(abc = tolower(ch)),
     .(sumrf = sum(realf))]

# Add a column with number of observations for each group

dt[, n := .N, by = ch][]
dt[, n := NULL] # remove for consistency

```

## dplyr

```{r}

tb |> 
  group_by(ch)|>
  summarise(sumrf = sum(realf)) # ordered results

# Assigned column name

tb |> 
  group_by(abc = tolower(ch))|>
  summarise(sumrf = sum(realf))

# Add a column with number of observations for each group

tb |>
  group_by(ch)|>
  add_tally()

# or...

add_count(tb, ch)

```

:::

## Going further

### Advanced columns manipulation

::: panel-tabset

## collapse

```{r}

# Summarize columns
df |>
  fsummarise(across(c("realf", "reald"),
            fmean))

# Summarize using a condition
df |>
  fsummarise(across(is.numeric, # different from dplyr due to across
                   fmean))

# Modify all the columns
df |> 
  fmutate(across(NULL,rev))

# Modify several columns
df |> 
  fcomputev(vars = c("realf", "reald"), # dropping the other columns
                  sqrt)

df <- df |>
  ftransformv(vars = c("realf", "reald"), # keeping the other columns
                sqrt)

df <- df |>
  ftransformv(vars = c("realf", "reald"), # reverting for consistency
                FUN = function(x){ x^2 })

# Modify columns using a condition 

df |>
  fcomputev(is.numeric,
           FUN = function(x){x - 1})

```

## data.table

```{r}

# Summarize columns
dt[, lapply(.SD, mean),
   .SDcols = c("realf", "reald")]

# Summarize using a condition
dt[, lapply(.SD, mean),
     .SDcols = is.numeric]

# Modify all the columns
dt[, lapply(.SD, rev)]

# Modify several columns
dt[, lapply(.SD, sqrt), # dropping the other columns
     .SDcols = realf:reald]

cols <- c("realf", "reald")

dt[, (cols) := lapply(.SD, sqrt), # keeping the other columns
     .SDcols = cols]

dt[, (cols) := lapply(.SD, "^", 2L), # reverting for consistency
     .SDcols = cols]

# Modify columns using a condition 
dt[, .SD - 1,
     .SDcols = is.numeric] 

rm(cols)

```

## dplyr

```{r}

# Summarize columns
tb |>
  summarise(across(c("realf", "reald"),
            mean))

# Summarize using a condition
tb |>
  summarise(across(where(is.numeric),
                   mean))

# Modify all the columns
tb |> 
  mutate(across(everything(),
                rev))

# Modify several columns
tb |>
  transmute(across(c("realf", "reald"), # dropping the other columns
                  sqrt))

tb <- tb |>
  mutate(across(all_of(c("realf", "reald")), # keeping the other columns
                sqrt))

tb <- tb |>
  mutate(across(all_of(c("realf", "reald")), # reverting for consistency
                ~ "^"(.x, 2L)))

# Modify columns using a condition 

tb |>
  transmute(across(where(is.numeric), 
                   ~ '-'(., 1L)))

```

:::

### Chain expressions 

::: panel-tabset

## collapse

```{r}

df |>
  fgroup_by(ch)|>
  fsummarise(sumrf = fsum(realf))|>
  fsubset(sumrf < 129000)

```

## data.table

```{r}

dt[, by = ch,
   .(sumrf = sum(realf))][
     sumrf < 129000
   ]

```

## dplyr

```{r}

tb |>
  group_by(ch)|>
  summarise(sumrf = sum(realf))|>
  filter(sumrf < 129000)

```

:::

### Indexing and keys (not sure it applies)

### set modifications

::: panel-tabset

## collapse

```{r}

# Replace values (recommendation to use set of data.table)

set(df, i = 1L, j = 2L, value = 30L) 

# Reorder rows

df <- roworder(df, id2, -id1)

df <- roworder(df, id1) # reversal for consistency

# Modify column names

df <- frename(df, dt = date)

df <- frename(df, date = dt) # reversal for consistency

# reorder columns

df <- colorder(df, id1, id2, ch)

```

## data.table

```{r}

# Replace values

set(dt, i = 1L, j = 2L, value = 30L)

# Reorder rows

setorder(dt, id2, -id1)

setorder(dt, id1) # reversal for consistency

# Modify column names

setnames(dt, old = "dt", new = "date")

setnames(dt, old = "date", new = "dt")  # reversal for consistency

# reorder columns

setcolorder(dt, c("id1","id2","ch"))

```

## dplyr

```{r}

# Replace values

tb[1,2] <- 30L

# Reorder rows

tb <- arrange(tb, id2, desc(id1))

tb <- arrange(tb, id1) # reversal for consistency

# Modify column names

tb <- rename(tb, date = dt)

tb <- rename(tb, dt = date) # reversal for consistency

# reorder columns

tb <- relocate(tb, c("id1", "id2", "ch"))

```

:::

### Advanced use of by (maybe)

## Join/Bind data sets

### Bind (focus on this)

## Efficient functions (maybe)

## Other useful functions in collapse

```{r}
# quick summary (From STATA summarize and xtsummarize)

qsu(df, cols = c("realf"))


```
