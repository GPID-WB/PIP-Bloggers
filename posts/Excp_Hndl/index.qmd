---
title: "Mastering tryCatch() in R: From Basics to Structured Logging"
description: "Learn how to use tryCatch() in R to handle errors and warnings, recover from failures, and build structured logging systems."
author: "Diana C. Garcia"
date: "2025-02-13"
categories: [R, Error Handling, Robust Code]
format:
  html:
    toc: true
editor_options: 
  chunk_output_type: console
execute:
  output: true
---

## Introduction

Error handling is a fundamental part of writing reliable R code. Whether you’re reading dozens of files, running a loop over thousands of observations, or building a data pipeline, something is bound to go wrong. When it does, `tryCatch()` allows your code to fail gracefully—without crashing your entire process.

In this post, we’ll start from scratch to understand how `tryCatch()` works, and build up to a practical and structured approach to logging and recovering from specific types of failures. Our goal is not just to catch errors, but to catch them **with context**, and handle them in a **controlled and traceable** way.

```{R}
#| warning: false
library(data.table)
```


## 1. A First Look at `tryCatch()`

Let’s begin with a minimal example that handles a simple error:

```{r}
tryCatch(
  expr = {
    stop("Something went wrong!")
  },
  error = function(e) {
    message("Caught an error: ", e$message)
    return(NA)
  }
)
```

This code tries to run the expression `stop("...")`, which throws an error. The `error =` block intercepts that error and prints a message, returning `NA` instead.

Similarly, we can catch warnings:

```{r}
tryCatch(
  expr = {
    warning("Something is off...")
    42
  },
  warning = function(w) {
    message("Caught a warning: ", w$message)
    return(-1)
  }
)
```

And we can also define a `finally` block that always runs, even if there's no error or warning:

```{r}
tryCatch(
  expr = {
    10
  },
  finally = {
    message("This always runs.")
  }
)
```

The core idea is this: `tryCatch()` lets you write error-handling logic in the same place your code runs, using specific condition types (like `error`, `warning`, or custom classes).


## 2. A Practical Example with Recovery Logic

Let’s look at a more realistic scenario. Suppose you have a function that sometimes succeeds, sometimes warns, and sometimes fails, depending on the input. 

:::{.callout-note}
This example is an adaptation of Jonathanscallahan's blog [Basic Error Handing in R with tryCatch()](https://www.r-bloggers.com/2020/10/basic-error-handing-in-r-with-trycatch/)
:::


```{r}
my_divide <- function(d, a) {
  if (a == "warning") {
    warning("my_divide warning message")
    return("Warning fallback result")
  } else if (a == "error") {
    stop("my_divide error message")
  } else {
    return(d / as.numeric(a))
  }
}
```

Now let’s use `tryCatch()` to run this function and react to each case:

```{r}
run_example <- function(a) {
  result <- tryCatch({

    b <- 2
    c <- b^2
    d <- c + 2

    if (a == "suppress-warnings") {
      e <- suppressWarnings(my_divide(d, a))
    } else {
      e <- my_divide(d, a)
    }

    f <- e + 100
    f

  }, warning = function(w) {
    message("Caught warning: ", conditionMessage(w))
    e <- my_divide(d, 0.1)
    f <- e + 100
    return(f)

  }, error = function(e) {
    message("Caught error: ", conditionMessage(e))
    e <- my_divide(d, 0.01)
    f <- e + 100
    return(f)

  }, finally = {
    message("a = ", a, "| b = ", b, "| c = ", c, "| d = ", d)
  })

  message("Final result: ", result)
  return(result)
}
```

Try it with different arguments:

```{r}
run_example("warning")
run_example("error")
run_example("2")
run_example("suppress-warnings")
```

This function shows several important ideas:

- You can distinguish between warnings and errors.
- You can recover differently depending on what went wrong.
- The `finally` block executes even if an error occurred.
- Values returned from the handler become the return value of the entire `tryCatch()` block.

## 3. Custom Error Classes and Structured Conditions

Catching errors like `"something went wrong"` is helpful, but not very specific. In a large pipeline, we often want to know:

- What type of error occurred
- Which function or step caused it
- What data triggered the failure

This is where custom error classes and structured metadata become useful.

Let’s say we want to define a special kind of error for when we detect duplicated rows in a dataset:

```{R}
dt <- data.table(
  country = c("A", "A", "B", "C", "C"),
  year = c(2020, 2020, 2021, 2022, 2022),
  value = c(10, 10, 20, 30, 30),
  id = c("A2020", "A2020", "B2021", "C2022", "C2022")
)

keyVar <- c("country", "year")
```

We can use `cli::cli_abort()` or `rlang::abort()` to raise an error with a custom class (using the `class` argument) and additional metadata with customed names arguments (i.e., arguments with names that you choose):

```{r}
check_for_duplicates <- function(dt, keyVar) {
  # Protect against unexpected base errors like missing columns
  tryCatch({
    if (uniqueN(dt, by = keyVar) != nrow(dt)) {
      dup_rows <- dt[duplicated(dt, by = keyVar)]
      n_rep <- nrow(dup_rows)

      cli::cli_abort(
        message = "Found {n_rep} duplicated row(s) in the dataset.",
        class = c("dup_pfw", "validation_error"),
        key = keyVar,
        ids = unique(dup_rows$id)
      )
    }

    return(dt)
  }, error = function(e) {
    # Bubble up unknown errors as-is to be caught by outer tryCatch
    stop(e)
  })
}
```

This raises a custom error of class `"dup_pfw"`, which we can later catch specifically inside `tryCatch()`:

```{r}
result <- tryCatch(
  expr = check_for_duplicates(dt, keyVar),
  
  dup_pfw = function(e) {
    message("Caught a known duplication issue.")
    message("Key used: ", paste(e$key, collapse = ", "))
    message("Affected IDs: ", paste(unique(e$ids), collapse = ", "))
    return(NULL)  # or apply a fix and return cleaned data
  },

  error = function(e) {
    message("Caught an unknown error: ", conditionMessage(e))
    return(NULL)
  }
)

```

### Why is this better?

- We’re not just catching any error — we’re catching *expected* errors by class.
- We can extract metadata (`e$key`, `e$ids`) to include in a log or a diagnostic message.
- If the error is **not** of class `"dup_pfw"`, it’s passed on to the more general `error` handler.

This sets us up for a robust logging system: when a known issue occurs, we log it with context; if it’s unknown, we escalate it or halt.


## 4. Building a Lightweight Logging System

When your code is running on hundreds of datasets or in a production pipeline, you don’t just want to know that something failed—you want a record of **what** failed, **where**, and **why**.

Let’s create a simple logging function that writes errors to a file:

```{r}
#| label: add-log
add_log <- function(cnd, logfile) {
  timestamp <- format(Sys.time(), "%Y-%m-%d %H:%M:%S")

  cat(
    "[", timestamp, "] ",
    "[", class(cnd)[1], "] ",
    cnd$message,
    if (!is.null(cnd$ids)) {
      paste(" | IDs:", paste(cnd$ids, collapse = ", "))
    },
    "\n",
    file = logfile,
    append = TRUE, 
    sep = ""
  )
}
```

This function takes any condition object and appends a formatted line to a plain-text file. It includes:

- The time of the error
- The class of the error
- The message
- Optionally, any custom metadata (like IDs or keys)


### Now let’s use it inside a `tryCatch()` block:

```{r}
#| label: handle-duplicates
logfile <- tempfile(fileext = ".txt")

handle_duplicates <- function(dt, keyVar, logfile) {
  tryCatch(
    expr = check_for_duplicates(dt, keyVar),

    dup_pfw = function(e) {
      add_log(e, logfile = logfile)  # log the known duplication error
      dt_clean <- unique(dt, by = keyVar)  # remove duplicates
      return(dt_clean)
    },

    error = function(e) {
      add_log(e, logfile = logfile)  # log unknown errors too
      message("Unexpected error occurred. See log for details.")
      return(NULL)  # <-- graceful exit without re-raising the error
      # Or, if you need the function to fail, you could do this:
      # stop("Unexpected error occurred. See log for details.")
    }
  )
}


handle_duplicates(dt, keyVar, logfile)
handle_duplicates(dt, "wrongVar", logfile)
```

This version of `handle_duplicates()` does three things:

1. Tries to detect duplicate rows.
2. If duplicates are found, it logs the error and removes them.
3. If an unknown error occurs, it logs that too—and stops execution.

This pattern is clean, recoverable, and extensible. You can add new condition classes for things like missing values, invalid columns, or range checks, and respond to each one differently. 


### Reading and Summarizing the Log File

After logging multiple errors during a data-cleaning process, you may want to quickly inspect what went wrong. Here’s how to read the log and get a summary of known vs. unknown errors.

Let’s assume we’ve used `add_log()` (from the previous section) to write to a file called `log.txt`.

```{r}
#| label: readlog
# Preview the raw log
readLines(logfile)
```

### Create a helper to summarize logs by type

We can write a small function to parse the log and report how many known and unknown errors occurred:

```{r}
#| collapse: true
#| label: summarize-log
summarize_log <- function(logfile) {
  if (!file.exists(logfile)) {
    message("No log file found.")
    return(invisible(NULL))
  }

  lines <- readLines(logfile)

  known <- grep("\\[dup_pfw\\]", lines, value = TRUE)
  unknown <- grep("\\[(simpleError|error)\\]", lines, value = TRUE)

  cat("== Log Summary ==\n")
  cat("Total entries:", length(lines), "\n")
  cat("Known 'dup_pfw' errors:", length(known), "\n")
  cat("Other (unknown) errors:", length(unknown), "\n")

  if (length(known)) {
    cat("\nKnown issues:\n")
    cat(paste("-", known), sep = "\n")
  }

  if (length(unknown)) {
    cat("\nUnknown issues:\n")
    cat(paste("-", unknown), sep = "\n")
  }
}
```

Now call it like this:

```{r}
summarize_log(logfile)
```

This small addition turns your log from a flat text dump into a searchable, inspectable tool — one that could be expanded later to generate HTML reports, markdown diagnostics, or summaries across datasets.

