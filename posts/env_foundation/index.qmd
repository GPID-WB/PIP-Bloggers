---
title: "R Environments Demystified (Part 1): Foundations of Environments and the Evaluation Stack"
description: "Understand the core structure of environments in R, the difference between frames and environments, and how functions capture and navigate them."
author:
  - name: R.Andres Castaneda
    email: acastanedaa@worldbank.org
    affiliation: 
      - The World Bank
      - DECDG
  - name: Zander Prinsloo
    email: zprinsloo@worldbank.org
date: "2025-04-17"
categories: [R, Environments, Metaprogramming]
format:
  html:
    toc: true
editor_options: 
  chunk_output_type: console
execute:
  output: true
---

## Intro

Understanding how environments work in R is essential for writing robust, transparent, and modular code — especially if you’re building functions, debugging pipelines, or using tidy evaluation.

In this post — the first in a three-part series — we go from **basic concepts** of environments and scoping to more advanced ideas like **frames**, **call stacks**, and how environments interact with function evaluation.

We’ll introduce the `{rlang}` package early on and use it as our main toolkit, referring to base R only when necessary. All `rlang` calls are explicitly prefixed (e.g., `rlang::env_parent()`) to make their source clear.

## 1. What Is an Environment?

An environment is a special kind of object in R that:

- Maps **names** to **values**,
- Has a **parent** (except for the empty environment),
- And is used to **look up variables** during evaluation.

It’s a key part of R’s **lexical scoping** system.

Let’s see it:

```{R}
env <- rlang::env(a = 1, b = "text", c = TRUE)
rlang::env_print(env)
```

This creates a new environment with three bindings (`a`, `b`, `c`) and shows its structure. Every environment points to a **parent environment**, forming a **chain**.



### Special Environments

```{R}
#| eval: false

rlang::global_env()   # Your top-level workspace
rlang::base_env()     # The environment of base R functions
rlang::empty_env()    # The bottom of the chain (no parent)
```

You can traverse this chain using `rlang::env_parent()` and `rlang::env_parents()`:

```{r}
rlang::env_parents(env)
```



## 2. Environments vs Lists

Environments are **not** lists, although they look similar, even though the return objects in a very similar way.

```{R}
lst <- list(x = 1)
env <- rlang::env(x = 1)

rlang::env_print(env)
lst$x

class(lst)
class(env)
```

Main differences:

| Feature             | Environment         | List           |
|---------------------|---------------------|----------------|
| Mutable             | Yes (by reference)  | No (copied)    |
| Has parent          | Yes                 | No             |
| Used for scoping    | Yes                 | No             |
| Iterable like a list| Not directly        | Yes            |


