---
title: "R Environments Demystified (Part 1): Foundations of Environments and the Evaluation Stack"
description: "Understand the core structure of environments in R, the difference between frames and environments, and how functions capture and navigate them."
author:
  - name: R.Andres Castaneda
    email: acastanedaa@worldbank.org
    affiliation: 
      - The World Bank
      - DECDG
  - name: Zander Prinsloo
    email: zprinsloo@worldbank.org
    affiliation: 
      - The World Bank
      - DECDG
date: "2025-04-17"
categories: [R, Environments, Metaprogramming]
format:
  html:
    toc: true
editor_options: 
  chunk_output_type: console
execute:
  output: true
---

## Introduction

Environments in R are often treated as an advanced topic, but they’re at the very heart of how R works. They control how variables are resolved, how functions capture state, how errors propagate, and how packages encapsulate behavior. In this first part of the series, we’ll build a clear conceptual foundation, starting with what environments are, how they relate to function execution, and how they interact with frames, the call stack, and closures.


## 1. What Is an Environment?

An environment in R is a key-value store with a parent link. It maps names to objects and determines how R resolves symbols during evaluation. 

Key features:

- It's a **bag of variables**, like a list, but with identity and a parent link.
- It supports **lexical scoping**: when R looks for a variable, it searches the current environment, then its parent, and so on.
- It's used by functions, packages, and the global workspace.

Every R session contains a hierarchy of environments, forming a directed tree:

```{r}
e <- new.env()
e$a <- 1
e$b <- "hello"
e$c <- list(a = 1, b = 2)

parent.env(e)
```

Each environment:

- Has **bindings** (e.g., `a`, `b`, `c`)
- Points to a **parent** environment
- Doesn’t inherit values — it only defers lookup to its parent if a name is not found

You can visualize the structure of any environment using:

```{r}
rlang::env_print(e)
```

