---
title: "What Is Non-Standard Evaluation (NSE) and Why Does It Matter?"
description: "Learn how to use R’s Non-Standard Evaluation tools — `quote()`, `substitute()`, `deparse()`, and `eval()` — to capture, inspect, and control code execution. This post breaks down these core functions with clear examples for logging, metaprogramming, and tidy evaluation."
author:
  - name: R.Andres Castaneda
    email: acastanedaa@worldbank.org
    affiliation: 
      - The World Bank
      - DECDG
date: "2025-04-30"
categories: [R, NSE, Metaprogramming]
format:
  html:
    toc: true
editor_options: 
  chunk_output_type: console
execute:
  output: true
---

## 1. Intro

Non-Standard Evaluation (NSE) is one of the most powerful --- and most confusing --- features of the R language. It allows functions to manipulate the **expressions** that users write, instead of just their evaluated values. This behavior is at the heart of many modeling and data manipulation tools in R, including `with()`, `subset()`, and all of the tidyverse.

### Historical Roots: `with()` and `subset()` in Base R

Before packages like `dplyr`, base R already offered functions that evaluated expressions **in a different context** --- usually within a data frame --- without requiring users to quote variable names.

Here are two classic examples:

```{R}
with(mtcars, mpg + cyl)
#> Adds mpg and cyl from mtcars — no $ needed

subset(mtcars, mpg > 20)
#> Filters rows where mpg > 20 — again, mpg is unquoted
```

In both cases, you are allowed to write expressions like `mpg + cyl` or `mpg > 20` directly, without using `mtcars$mpg`. This works because `with()` and `subset()` don't evaluate their arguments immediately. Instead, they capture the **expression** you wrote and evaluate it **inside the data frame environment**.

This ability to manipulate expressions and control where they are evaluated is exactly what Non-Standard Evaluation enables.

### What Is Standard Evaluation?

To appreciate what NSE changes, it helps to understand what R does **by default** --- which is standard evaluation (SE).

In SE, R evaluates every name and expression **before** passing it to a function. For example:

```{R}
x <- 10
f <- function(y) y + 1
f(x)
```

Here, `x` is evaluated to `10`, and `f()` receives that value.

### What Is Non-Standard Evaluation?

With NSE, a function can capture **what the user typed** --- the unevaluated expression --- and decide:

-   **When** to evaluate it,
-   **Where** to evaluate it,
-   Or even whether to evaluate it at all.

Let's create a minimal example:

```{R}
print_expr <- function(expr) {
  print(expr)
}
print_expr(x + 1)
```

Looks standard, right? Now try this:

```{R}
print_expr <- function(expr) {
  print(substitute(expr))
}
print_expr(x + 1)
```

Now we're seeing the **expression** `x + 1` itself, rather than the result `11`. That's NSE in action: we intercepted the unevaluated code.

### A Concrete Example: Logging

Let's write a simple logger that prints the code you typed:

```{R}
log_eval <- function(expr) {
  cat("About to evaluate:", deparse(substitute(expr)), "\n")
  result <- eval(expr)
  result
}

x <- 2
log_eval(x + 3)
```

This function:

-   Uses `substitute()` to capture the expression `x + 3`,
-   Prints the expression,
-   Then evaluates it.

As an aside, this can also be done using `match.call()`, which you can read more about using `?match.call()`. Note the way the `match.call()` is subsetted -- what does that tell you about the output of the function?

```{R}
log_eval <- function(expr) {
  p <- match.call()
  cat("calling function:", deparse(p[[1]]), "\n")
  cat("About to evaluate:", deparse(p[[2]]), "\n")
  result <- eval(expr)
  result
}
log_eval(x + 3)
log_eval(mean(x + c(5:10)))
```

## 2. Expressions Are Not Strings: Understanding How R Represents Code

To understand that piece of code fully, we need to know tools like `substitute()`, `deparse()`, or `eval()`. Yet, there is something even more fundamental to understand first:

> In R, **code is data**.

When you write `x + 1`, R does **not** treat that as text or as a string. Instead, it creates a structured object --- an **expression** --- that the interpreter can inspect, manipulate, or evaluate later.

This idea is essential to understanding how Non-Standard Evaluation (NSE) works.

### What Is an Expression?

In R, an **expression** is an object that represents unevaluated code.

Here's how you create one:

```{R}
expr <- quote(x + 1)
expr
```

This object is **not** the result of `x + 1`, and it's not the character string `"x + 1"` (notice that it does not have quotes in the console). It's a special object of class `"call"` --- sometimes also called a **language object**.

You can verify this:

```{R}
class(expr)
typeof(expr)
```

This means that R has captured the code itself --- as structured, evaluable (i.e., unevaluated) data.

### Why Expressions Are Not Strings

Try this:

```{R}
expr <- quote(x + 1)
is.character(expr)
print(expr)
```

Even though it *looks like* a string when printed, it's not. R stores the structure of the code, not its textual representation.

In fact, expressions behave like recursive lists. You can inspect their components:

```{R}
expr[[1]]  # the function being called
expr[[2]]  # first argument
expr[[3]]  # second argument
```

This kind of structure is what makes metaprogramming possible in R.

### `quote()` -- The Basic Tool to Capture Code

`quote()` is the most direct way to create an expression.

```{R}
quote(mean(x, na.rm = TRUE))
```

This returns a `"call"` object, which you can store, inspect, and evaluate later.

`quote()` prevents R from evaluating the expression. It captures it *as is*, before any names are resolved.

Compare:

```{R}
x <- 10

# This
quote(x + 1)

# To this
x + 1
```

In the first case, R captures the expression; in the second, it evaluates it.

`bquote()` allows partial evaluation inside a quoted expression, useful for plotting or math expressions.

```{R}
e <- rlang::env(x = 100, y = 300)
y <-  1
quote(.(x) + y)
bquote(.(x) + y) 
# part in .() is evaluated in `where` 
bquote(.(x) + y, where = e) 
bquote((x) + y)
```

### `deparse()` -- Turning Code into Strings

Now suppose you want to print this expression. If you use `print(expr)`, you get a nice display. But if you need the **actual string** `"x + 1"` (e.g. for logging or including it in `cat()` or `paste()`), you need `deparse()`:

```{R}
expr <- quote(x + 1)
deparse(expr)
```

So:

-   `quote(x + 1)` → structured expression
-   `deparse(quote(x + 1))` → character string `"x + 1"`

This distinction is critical. If you treat expressions like strings too early, you lose their structure.

### `substitute()` -- Capturing Expressions from Arguments

While `quote()` is explicit, `substitute()` works *implicitly* by intercepting **what the user typed as an argument**.

Example:

```{R}
log_expr <- function(arg) {
  code <- substitute(arg)
  print(code)
}

log_expr(x + 1)
```

Behind the scenes, `substitute(arg)` is doing the same thing as `quote(x + 1)` --- except it's happening **within the calling context**. That's why we often say that `substitute()` is a dynamic version of `quote()` --- it's context-sensitive.

To show the equivalence:

```{R}
quote(x + 1) == substitute(x + 1)
```

But `substitute(arg)` only works inside a function --- because it inspects the actual expression passed to `arg`.

### So, what's the difference between `quote()` and `substitute()`?

Both `quote()` and `substitute()` capture unevaluated code, but **context matters**.

-   `quote()` always returns the literal symbol or expression, without considering the call context.
-   `substitute()` captures **what the user typed**, dynamically, at the function call site.

#### Example: Compare Their Behavior Inside a Function

```{R}
inspect <- function(expr) {
  list(
    quoted      = quote(expr),         # Always returns the symbol 'expr'
    substituted = substitute(expr),    # Captures the user's input expression
    evaluated   = eval(expr)           # Executes the expression
  )
}

x <- 3
inspect(x + 1)
```

#### Key Point:

-   `quote(expr)` always gives you `expr` --- the literal name.
-   `substitute(expr)` gives you `x + 1` --- what the user typed.
-   `eval(expr)` computes the result.

Use `substitute()` when **writing functions** that need to inspect or log **user input**. Use `quote()` when you need to **manually build expressions**.

### Putting It All Together

Let's summarize the roles:

| Function | Purpose | Returns |
|------------------|----------------------------------|--------------------|
| `quote(expr)` | Capture unevaluated code | Expression / call |
| `substitute(arg)` | Capture the *argument* passed to a function | Expression / call |
| `deparse(expr)` | Convert an expression to a string | Character string |
| `eval(expr)` | Evaluate the expression | Result of computation |

## 3. Combining `substitute()`, `deparse()`, and `eval()` in Real-World Logging

Now that we understand the difference between `quote()` and `substitute()`, and how `eval()` and `deparse()` work, let's build a real-world example that demonstrates why all of this matters in practice.

Imagine you're writing a logging wrapper to:

-   Report **what expression the user typed**
-   Evaluate it
-   Record the result (or the error)

### A Logging Evaluator

```{R}
log_and_eval <- function(expr) {
  # Capture the expression (as typed)
  code <- substitute(expr)

  # Turn the code into readable text
  code_text <- deparse(code)

  # Evaluate the expression
  result <- tryCatch(
    expr = {
      x <- eval(code)
          # Print and return
      cli::cli_inform("Successfully evaluated: {code_text}")
      cli::cli_inform("Result: {x}")
    },
    error = function(e) {
      cli::cli_alert_danger("Error while evaluating: {code_text}
                     MSG: {e$message}")
      return(NULL)
    }
  )

  
  invisible(result)
}
```

### Try It Out

```{R}
x <- 10
log_and_eval(x + 1)
```

```{R}
log_and_eval(log("hello"))  # will fail
```

### What Happens If You Try to Use `eval(expr)` Without `substitute()`?

You might wonder: why do we assign `code <- substitute(expr)` and then evaluate `code`? Why not just call `eval(expr)` directly?

Here's why:

-   When `expr` is passed to the function `log_and_eval()`, R **evaluates it immediately**, unless we explicitly tell it not to.
-   The role of `substitute(expr)` is to **capture the unevaluated expression** that the user typed at the call site.
-   If you skip `substitute()`, then `expr` has already been evaluated by the time it enters the function --- and you've lost the original code.

Compare with definition:

```{R}
log_eval_wrong <- function(expr) {
  # expr has already been evaluated here
  cat("Trying to print the expr. We just get the result: ", 
      deparse(expr), "\n")
  expr 
}
```

Calling `log_eval_wrong(x + 1)` can't show us the expression:

```{R}
#| error: true

x <- 10
log_eval_wrong(x + 1)
```

That's because by the time `deparse(expr)` runs, `expr` has already been evaluated to a number (`11`), not an expression.

We use `substitute()` to freeze user input and `eval()` to control exactly when and where it runs.

## 4. Controlling *Where* Code Is Evaluated with `eval(expr, envir)`

So far, we've used `eval(expr)` to run expressions in the current environment. But a key feature of `eval()` is that it also lets you choose **where** the code is evaluated --- and this is essential for many real-world use cases.

### Changing the Environment

You can use `eval(expr, envir = ...)` to evaluate the code in **a different environment**. This lets you build flexible tools like scoped evaluators, delayed execution, and data-aware functions.

```{R}
# Create a custom environment
custom_env <- rlang::env(x = 100)

expr <- quote(x + 1)
eval(expr, envir = custom_env)
```

Even though there's a global `x <- 5`, the expression is evaluated in `custom_env`, where `x = 100`.

### Why This Is Powerful

This behavior is foundational for base R tools like `with()` and `subset()`, and for tidyverse functions like `dplyr::filter()`:

```{R}
eval(quote(mpg > 25), envir = mtcars)
```

Here, `mpg` is treated as a column inside `mtcars`, not as a variable in the global environment. This is how `dplyr::filter(mtcars, mpg > 25)` works internally.

### How to Use It in Your Own Code

To really see the importance of `substitute()`, let's consider a slightly more advanced case: evaluating code in a **different environment**.

Suppose you want to evaluate an expression using variables defined in a **custom environment**, not the global one. Here's how it works when done **correctly**:

```{R}

log_and_eval_env <- function(expr, env = parent.frame()) {
  code <- substitute(expr)
  code_text <- deparse(code)
  
  result <- tryCatch(
    expr = {
      x <- eval(code, envir = env)
           # Print and return
      cli::cli_inform("Evaluated in custom env: {code_text}")
      cli::cli_inform("Result: {x}")
    },
    error = function(e) {
      cli::cli_alert_danger("Error in {code_text}: {e$message}")
      return(NULL)
    }
  )
  
  
  invisible(result)
}
```

```{R}
#| error: true

# we create x in env e
e <- rlang::env(x = 100)

# and also have `x` in global 
x <- 10

# Here the code is evaluated in env `e`
log_and_eval_env(x + 1, env = e)

# This is evaluated in global env
log_and_eval_env(x + 1)

# Notice that we could create `y` in `e`
log_and_eval_env(y <- x + 1, env = e)
e$y

# And it was not create in Global because it was evaluated in `e`
y # this gives you error. 

# But here, it was created in `y`
log_and_eval_env(y <- x + 1)
y

```

This works because `substitute()` captured the unevaluated expression `x + 1`, and `eval()` was able to look up `x` in the `env` environment.

But what happens if we don't use `substitute()`?

```{R}
log_eval_env_wrong <- function(expr, env = parent.frame()) {
  # expr has already been evaluated here!
  text <- deparse(expr)  # will  fail
  result <- eval(expr, envir = env)
  cli::cli_inform("Result: {result}")
  invisible(result)
}
```

Now try:

```{R}
#| error: true
x <- 10
log_eval_env_wrong(x + 1, env = e)

rm(x)
log_eval_env_wrong(x + 1, env = e)

```

This code first returns 11, then throws an error. This happens because when `expr` reaches `eval()` it is already too late because it has already been evaluated to in `deparse()`, so `eval()` simply returns `11`. In the second case, where `x` is removed from the Global environment, `expr` is evaluated in `deparse()` and fails.

This is also evident in the following code.

Since the expression is `y <- x + 1`, and `e` is passed as the evaluation environment, **the assignment takes place in `e`**.

In R, `eval(expr, envir = some_env)` *does* make assignments into `some_env` **if the expression is syntactically an assignment**, like `y <- something`.

But this fails for assigning into `foo()`'s environment

```{R}
#| error: true
# Why this does not work. 
foo <- \() {
  y <- 3 + 2
  goo <- \() {
  
    eval(z <- y + 2, envir = parent.frame())
  }
  goo()
  z   # Error: object 'z' not found
}
foo()

```

That's why `substitute()` is essential in any function that wants to control **when** and **where** evaluation happens. Now, this is how it works:

```{R}
# Why this does not work. 
foo <- \() {
  y <- 3 + 2
  goo <- \() {
  
    expr <- substitute(z <- y + 2) # this makes it work
    eval(expr, envir = parent.frame())
  }
  goo()
  z 
}
foo()

```

However, as we will see in another post, the best way to do this is `assign("z", value, envir = target_env)`. This is the safest and most readable.
