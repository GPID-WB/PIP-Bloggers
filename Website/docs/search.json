[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "First Blog",
    "section": "",
    "text": "The following is an example of how to use exception handling in R for our packages. In particular, I focus on using tryCatch . This is an example still in the making (so I will probably updated once I understand better the topic and I have created a final version for pipdata ), but for now, you all can already give it a try.\n\n\nFirst, these are the main libraries I used.\n# Load libraries\nlibrary(metapip)\nlibrary(data.table)\nHowever, make sure to have installed the following packages as well: cli and rlang .\nThe following is the example of the function I need to be ‚Äúhandle‚Äù with tryCatch . This function tries to check if there are duplicates in dt according to some keyVar and if there are duplicates it could abort and exit or continue without exiting. The function has another two parameters to decide the following:\n1. log_err if we want the error to be included in a error-report log ( TRUE and FALSE)\n2. skip_err if we want the error to be skipped ( TRUE and FALSE)\n# Function to handle duplicated observations in pfw\nunq_pfw &lt;- function(dt,\n                    keyVar,\n                    log_err = TRUE,\n                    skip_err = TRUE) {\n\n  tryCatch(\n\n    expr = {\n\n      if(uniqueN(dt, by = keyVar) != nrow(dt)){\n\n        dt_d &lt;- dt[duplicated(dt, by = keyVar)]\n        n_rep &lt;- nrow(dt_d)\n\n        cli::cli_abort(message = \"There {?is/are} {n_rep} duplicates in `pfw`\",\n                       class = c(\"dup_pfw\", \"piperr\"),\n                       log = log_err,\n                       skip = skip_err,\n                       link =  unique(dt_d$link),\n                       call = sys.call())\n      }\n\n    },\n\n    dup_pfw = function(cnd){\n\n      if(cnd$log){ # Log the error\n\n        add_log(cnd)\n\n      }\n\n      if(!cnd$skip){ # Abort if you don't want to skip, but after logging\n\n        cli::cli_abort(cnd$message, call = cnd$call)\n\n      }\n\n    },\n\n    finally = {\n\n      dt &lt;- unique(dt, by = keyVar) # eliminate duplicates\n\n    }\n\n  )\n\n\n  return(dt)\n\n}\nIf you run the lines within expr ={ } , this will probably crash and an error about duplicates will be shown. However, what I want is to first record this error on a log, and then decide if to skip the error or not, and get a clean dataset. That is why we need tryCatch . As you can see within the finally section, I also included a line that eliminates the duplicates and returns the new ‚Äúclean‚Äù dataset. This is because I am going to ‚Äúhandle‚Äù the abort actions with tryCatch and after this, R will ‚Äúfinally‚Äù run these lines and give us the clean output we need (if we do not want to abort).\nNow let me explain the steps within the tryCatch . First, you might be wondering what are the parameters within cli::cli_abort() . I assume message is straightforward. However, class might be the most important. The class we give to this specific error, or condition, will be what makes it identifiable on our tryCatch . Since we gave a new class to the error called dup_pfw , the function tryCatch, instead of aborting and exiting the code when the error is found, will run the code within dup_pfw = function(cnd){ } instead. The parameter cnd then carries all the information we gave within cil::cli_abort ; the class , the log/skip actions, and the identifiers of the duplicates link .\nImportant: The parameters log and skip within cil::cli_abort are my tools to decide how to handle this error and these are totally made up by me for this specific function. You can create any parameter you want within cli::abort() and this will carry on within the handler. For example, I created the parameter link which will carry the identifiers of those duplicated observations. These are needed for the error-report log.\nTalking about the log, before you run the code below, please load the following function add_log . This function will load some concatenated text on the file log.txt saved in your working directory and it is used within the handler.\n# Function for logging\nadd_log &lt;- function(cnd) {\n\n  cat(\n    \"[\", class(cnd)[[1]], \"-\", class(cnd)[[2]], \"] \",\n    cnd$message,\" for \",\n    cnd$link, \"\\n\", sep = \"\",\n    file = \"log.txt\", append = TRUE\n  )\n\n}\n\n\n\nThe data used for this example can be loaded with pipload and represents the auxiliary Price Frame Work, or pfw . Since I needed it to run over the error at some point, I also create another data frame with some duplicates, pfw_d .\n# Load data\npfw_t &lt;- pip_load_aux(\"pfw\")\n\npfw_d &lt;- rbind(pfw_t, pfw_t[rep(1, 5), ]) # Duplicate some rows from one country\nNow, we will run the function and this should not give you any errors because the default value of skip_err = TRUE .\n# Run tryCatch for unq_pwf function\nkeyVar &lt;- c(\"country_code\", \"surveyid_year\", \"survey_acronym\")\n\npfw &lt;- unq_pfw(pfw_d, keyVar)\nIf the error was handled and skipped correctly (default parameters), the answer to the following code should give you TRUE and you will find a log.txt file with the new record of these error.\n# Test\n\nuniqueN(pfw, by = keyVar) == nrow(pfw)\nHowever, if you run the function without skipping the error, the abort function will come into action:\n# Run tryCatch for unq_pwf function without skipping error\n\npfw &lt;- unq_pfw(pfw_d, keyVar, skip_err = FALSE)\nLet me know if that is not the case, or if you have any questions about the example! Happy to talk about it and learn together üôÇ\n\n\n\nA few websites I reviewed to learned more about this:\n\nhttps://adv-r.hadley.nz/conditions.html#conditions\nhttps://medium.com/number-around-us/catch-me-if-you-can-exception-handling-in-r-2e0f6c473a28\nhttps://cnuge.github.io/post/trycatch/\nhttps://aryoda.github.io/tutorials/tryCatchLog/tryCatchLog-intro-slides.html#/ (still reviewing it)\n\n\n\n\n\n\n\nA few things I am still figuring/working out are:\n\nI still have to format the add_log function to allowed for more than one character on the cnd$link value, or to make it more general so it can be used in other handlers."
  },
  {
    "objectID": "index.html#load-libraries-and-functions",
    "href": "index.html#load-libraries-and-functions",
    "title": "First Blog",
    "section": "",
    "text": "First, these are the main libraries I used.\n# Load libraries\nlibrary(metapip)\nlibrary(data.table)\nHowever, make sure to have installed the following packages as well: cli and rlang .\nThe following is the example of the function I need to be ‚Äúhandle‚Äù with tryCatch . This function tries to check if there are duplicates in dt according to some keyVar and if there are duplicates it could abort and exit or continue without exiting. The function has another two parameters to decide the following:\n1. log_err if we want the error to be included in a error-report log ( TRUE and FALSE)\n2. skip_err if we want the error to be skipped ( TRUE and FALSE)\n# Function to handle duplicated observations in pfw\nunq_pfw &lt;- function(dt,\n                    keyVar,\n                    log_err = TRUE,\n                    skip_err = TRUE) {\n\n  tryCatch(\n\n    expr = {\n\n      if(uniqueN(dt, by = keyVar) != nrow(dt)){\n\n        dt_d &lt;- dt[duplicated(dt, by = keyVar)]\n        n_rep &lt;- nrow(dt_d)\n\n        cli::cli_abort(message = \"There {?is/are} {n_rep} duplicates in `pfw`\",\n                       class = c(\"dup_pfw\", \"piperr\"),\n                       log = log_err,\n                       skip = skip_err,\n                       link =  unique(dt_d$link),\n                       call = sys.call())\n      }\n\n    },\n\n    dup_pfw = function(cnd){\n\n      if(cnd$log){ # Log the error\n\n        add_log(cnd)\n\n      }\n\n      if(!cnd$skip){ # Abort if you don't want to skip, but after logging\n\n        cli::cli_abort(cnd$message, call = cnd$call)\n\n      }\n\n    },\n\n    finally = {\n\n      dt &lt;- unique(dt, by = keyVar) # eliminate duplicates\n\n    }\n\n  )\n\n\n  return(dt)\n\n}\nIf you run the lines within expr ={ } , this will probably crash and an error about duplicates will be shown. However, what I want is to first record this error on a log, and then decide if to skip the error or not, and get a clean dataset. That is why we need tryCatch . As you can see within the finally section, I also included a line that eliminates the duplicates and returns the new ‚Äúclean‚Äù dataset. This is because I am going to ‚Äúhandle‚Äù the abort actions with tryCatch and after this, R will ‚Äúfinally‚Äù run these lines and give us the clean output we need (if we do not want to abort).\nNow let me explain the steps within the tryCatch . First, you might be wondering what are the parameters within cli::cli_abort() . I assume message is straightforward. However, class might be the most important. The class we give to this specific error, or condition, will be what makes it identifiable on our tryCatch . Since we gave a new class to the error called dup_pfw , the function tryCatch, instead of aborting and exiting the code when the error is found, will run the code within dup_pfw = function(cnd){ } instead. The parameter cnd then carries all the information we gave within cil::cli_abort ; the class , the log/skip actions, and the identifiers of the duplicates link .\nImportant: The parameters log and skip within cil::cli_abort are my tools to decide how to handle this error and these are totally made up by me for this specific function. You can create any parameter you want within cli::abort() and this will carry on within the handler. For example, I created the parameter link which will carry the identifiers of those duplicated observations. These are needed for the error-report log.\nTalking about the log, before you run the code below, please load the following function add_log . This function will load some concatenated text on the file log.txt saved in your working directory and it is used within the handler.\n# Function for logging\nadd_log &lt;- function(cnd) {\n\n  cat(\n    \"[\", class(cnd)[[1]], \"-\", class(cnd)[[2]], \"] \",\n    cnd$message,\" for \",\n    cnd$link, \"\\n\", sep = \"\",\n    file = \"log.txt\", append = TRUE\n  )\n\n}"
  },
  {
    "objectID": "index.html#load-data-and-run-code",
    "href": "index.html#load-data-and-run-code",
    "title": "First Blog",
    "section": "",
    "text": "The data used for this example can be loaded with pipload and represents the auxiliary Price Frame Work, or pfw . Since I needed it to run over the error at some point, I also create another data frame with some duplicates, pfw_d .\n# Load data\npfw_t &lt;- pip_load_aux(\"pfw\")\n\npfw_d &lt;- rbind(pfw_t, pfw_t[rep(1, 5), ]) # Duplicate some rows from one country\nNow, we will run the function and this should not give you any errors because the default value of skip_err = TRUE .\n# Run tryCatch for unq_pwf function\nkeyVar &lt;- c(\"country_code\", \"surveyid_year\", \"survey_acronym\")\n\npfw &lt;- unq_pfw(pfw_d, keyVar)\nIf the error was handled and skipped correctly (default parameters), the answer to the following code should give you TRUE and you will find a log.txt file with the new record of these error.\n# Test\n\nuniqueN(pfw, by = keyVar) == nrow(pfw)\nHowever, if you run the function without skipping the error, the abort function will come into action:\n# Run tryCatch for unq_pwf function without skipping error\n\npfw &lt;- unq_pfw(pfw_d, keyVar, skip_err = FALSE)\nLet me know if that is not the case, or if you have any questions about the example! Happy to talk about it and learn together üôÇ"
  },
  {
    "objectID": "index.html#sources",
    "href": "index.html#sources",
    "title": "First Blog",
    "section": "",
    "text": "A few websites I reviewed to learned more about this:\n\nhttps://adv-r.hadley.nz/conditions.html#conditions\nhttps://medium.com/number-around-us/catch-me-if-you-can-exception-handling-in-r-2e0f6c473a28\nhttps://cnuge.github.io/post/trycatch/\nhttps://aryoda.github.io/tutorials/tryCatchLog/tryCatchLog-intro-slides.html#/ (still reviewing it)"
  },
  {
    "objectID": "index.html#work-in-progress",
    "href": "index.html#work-in-progress",
    "title": "First Blog",
    "section": "",
    "text": "A few things I am still figuring/working out are:\n\nI still have to format the add_log function to allowed for more than one character on the cnd$link value, or to make it more general so it can be used in other handlers."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Cool content about the development of PIP packages"
  }
]